#!/usr/bin/env sh
set -eu

. "$(dirname "${0}")/lib/lib-loader.sh"
load_libs "$(dirname "${0}")/lib"

BUCKET_NAME=""
SUBDOMAIN=""
HOSTED_ZONE_ID=""
STACK_NAME=""
ENABLE_CANONICAL_URIS=""
ROOT_DOMAIN_NAME=""
ENABLE_SECURITY_HEADERS=""
CONTENT_SECURITY_POLICY=""
TAGS=""

usage() {
	style bold <<-EOF
		${RESET}Usage: $0 [options] <site-name>

		${RESET}Creates a new AWS CloudFormation stack to provision a static website.

		${RESET}Options:
		  -b, --bucket-name <name>    ${RESET}Specify a custom bucket name.
		  -s, --subdomain <name>      ${RESET}Specify a subdomain.
		  -z, --hosted-zone-id <ID>   ${RESET}Use an existing Hosted Zone ID instead of creating one.
		  -n, --stack-name <name>     ${RESET}Specify a custom CloudFormation stack name.
		  -nc, --no-canonical-uris    ${RESET}Disable URI canonicalization (See ./README.md for more details).
		  --no-security-headers       ${RESET}Disable the default security headers.
		  --csp-policy <policy>       ${RESET}Specify a custom Content Security Policy (CSP) for the site.
		                              ${RESET}${DIM}Default is "frame-ancestors 'self';".
		  -t, --tag <tag>             ${RESET}Add a tag (format: key=value).
		  --tags <tags>               ${RESET}Add multiple tags (format: "key1=value1 key2=value2").
		                              ${RESET}${DIM}Note: --tag and --tags can be combined and used multiple times.
		  -h, --help                  ${RESET}Display this help message.
	EOF
}

check_dependencies

# Parse Arguments
POSITIONAL_ARGS=""
while [ "$#" -gt 0 ]; do
	current_arg="$1"
	next_arg="${2-}"

	case "$current_arg" in
	-b | --bucket-name)
		require_argument "$current_arg" "$next_arg"
		warn_if_conflict "--bucket-name" "$BUCKET_NAME"
		BUCKET_NAME="$next_arg"
		shift
		;;
	-s | --subdomain)
		require_argument "$current_arg" "$next_arg"
		warn_if_conflict "--subdomain" "$SUBDOMAIN"
		SUBDOMAIN="$next_arg"
		shift
		;;
	-z | --hosted-zone-id)
		require_argument "$current_arg" "$next_arg"
		warn_if_conflict "--hosted-zone-id" "$HOSTED_ZONE_ID"
		HOSTED_ZONE_ID="$next_arg"
		shift
		;;
	-n | --stack-name)
		require_argument "$current_arg" "$next_arg"
		warn_if_conflict "--stack-name" "$STACK_NAME"
		STACK_NAME="$next_arg"
		shift
		;;
	-t | --tag | --tags)
		require_argument "$current_arg" "$next_arg"
		TAGS="${TAGS:+$TAGS }${next_arg}"
		shift
		;;
	-nc | --no-canonical-uris)
		ENABLE_CANONICAL_URIS="false"
		;;
	--no-security-headers)
		warn_if_conflict "--csp-policy" "$CONTENT_SECURITY_POLICY" "CSP policy will not be applied when security headers are disabled"
		ENABLE_SECURITY_HEADERS="false"
		;;
	--csp-policy)
		require_argument "$current_arg" "$next_arg"
		warn_if_conflict "--csp-policy" "$CONTENT_SECURITY_POLICY"
		warn_if_conflict "--no-security-headers" "$ENABLE_SECURITY_HEADERS" "CSP policy will not be applied when security headers are disabled"
		CONTENT_SECURITY_POLICY="$next_arg"
		;;
	-h | --help)
		usage
		exit 0
		;;
	-*)
		style red "Unknown option: $current_arg" >&2
		usage
		exit 1
		;;
	*)
		POSITIONAL_ARGS="${POSITIONAL_ARGS:+$POSITIONAL_ARGS }${current_arg}"
		;;
	esac
	shift
done

# shellcheck disable=SC2086
set -- $POSITIONAL_ARGS
unset POSITIONAL_ARGS

# Set positional arguments
ROOT_DOMAIN_NAME="${1}"

# Validate required arguments
if [ -z "$ROOT_DOMAIN_NAME" ]; then
	style red "Error: Missing required argument: <site-name>" >&2
	usage
	exit 1
fi

# Set default values for optional arguments
FULL_DOMAIN_NAME="${SUBDOMAIN:+${SUBDOMAIN}.}${ROOT_DOMAIN_NAME}"
: "${STACK_NAME:=$(echo "$FULL_DOMAIN_NAME" | sed -E 's/[^a-zA-Z0-9\-]+/-/g')}"
: "${BUCKET_NAME:=$FULL_DOMAIN_NAME}"
: "${ENABLE_CANONICAL_URIS:=true}"
: "${ENABLE_SECURITY_HEADERS:=true}"
: "${CONTENT_SECURITY_POLICY:=frame-ancestors 'self';}"

print_config() {
	if [ "$ENABLE_SECURITY_HEADERS" = "true" ]; then
		CSP_DISPLAY_VALUE="$CONTENT_SECURITY_POLICY"
	else
		CSP_DISPLAY_VALUE="${DIM}(disabled)${RESET}"
	fi

	style <<-EOF
		${BOLD}---- Configuration Summary ---${RESET}
		Root Domain Name:           $ROOT_DOMAIN_NAME
		Subdomain:                  ${SUBDOMAIN:-"${DIM}(none)${RESET}"}
		Bucket Name:                ${BUCKET_NAME}
		Hosted Zone ID:             ${HOSTED_ZONE_ID:-"${DIM}(to be created)${RESET}"}
		CloudFormation Stack Name:  ${STACK_NAME}
		Canonical URIs:             ${ENABLE_CANONICAL_URIS}
		Security Headers:           ${ENABLE_SECURITY_HEADERS}
		Content Security Policy:    ${CSP_DISPLAY_VALUE}
		Tags:                       ${TAGS:-"${DIM}(none)${RESET}"}
		${BOLD}-----------------------------${RESET}
	EOF
}

deploy_cloudformation_stack() {
	style blue "Start provisioning for ${FULL_DOMAIN_NAME}"

	echo "Deploying Cloudformation stack ${STACK_NAME} for ${ROOT_DOMAIN_NAME}"
	aws cloudformation deploy \
		--stack-name "${STACK_NAME}" \
		--template-file cloudformation/template.yml \
		--parameter-overrides \
			"RootDomainName=${ROOT_DOMAIN_NAME}" \
			"BucketName=${BUCKET_NAME}" \
			"HostedZoneId=${HOSTED_ZONE_ID:-}" \
			"Subdomain=${SUBDOMAIN:-}" \
			"EnableCanonicalURIs=${ENABLE_CANONICAL_URIS}" \
			"EnableSecurityHeaders=${ENABLE_SECURITY_HEADERS}" \
			"ContentSecurityPolicy=${CONTENT_SECURITY_POLICY}" \
		${TAGS:+--tags $TAGS}

	style green "Stack provisioned successfully!"
}

display_outputs() {
	style blue "Stack outputs for ${STACK_NAME}"
	aws cloudformation describe-stacks \
		--stack-name "${STACK_NAME}" \
		--query "Stacks[0].Outputs[*].[OutputKey,OutputValue]" \
		--output text | while read -r key value; do
		printf "  ${BOLD}%s:${RESET} %s\n" "$key" "$value"
	done

	style green "Provisioning complete for ${FULL_DOMAIN_NAME}!"
	style dim "You can now upload your static files to the S3 bucket named ${BUCKET_NAME}"
}

# Main execution
print_config
deploy_cloudformation_stack
display_outputs
