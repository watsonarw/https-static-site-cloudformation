Parameters:
  RootDomainName:
    Type: String
    Description: The root domain name for our site, e.g. `example.com`
  BucketName:
    Type: String
    Description: The name for the S3 bucket
  HostedZoneIdImportName:
    Type: String
    Description: Name of an exported Cloudformation output for the hosted zone ID
  Subdomain:
    Type: String
    Description: The subdomain for our site, e.g. "staging" for `staging.example.com`
    Default: ""
  EnableCanonicalURIs:
    Type: String
    Description: "Enable URI canonicalization that normalizes slashes and redirects extensionless paths to directory format (/about -> /about/) for SEO benefits."
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableSecurityHeaders:
    Type: String
    Description: "Enable default security headers for the site. Provides additional security against common web vulnerabilities."
    Default: "true"
    AllowedValues: ["true", "false"]
  ContentSecurityPolicy:
    Type: String
    Description: "Override the default Content Security Policy (CSP) for the site."
    Default: "frame-ancestors 'self';"

Conditions:
  HasSubdomain: !Not [!Equals [!Ref Subdomain, ""]]
  CreateWWWRecord: !Not [!Condition HasSubdomain]
  EnableSecurityHeaders: !Equals [!Ref EnableSecurityHeaders, "true"]

Resources:
  SiteS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketName: !Ref BucketName

  SiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SiteS3Bucket
      PolicyDocument:
        Statement:
          - Sid: ReadAccess
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "${SiteS3Bucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${SiteCDN}"

  TLSCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !If [HasSubdomain, !Sub "${Subdomain}.${RootDomainName}", !Ref RootDomainName]
      SubjectAlternativeNames: !If
        - HasSubdomain
        - !Ref AWS::NoValue
        - - !Sub "www.${RootDomainName}"
      ValidationMethod: DNS
      DomainValidationOptions: !If
        - HasSubdomain
        - - DomainName: !Sub "${Subdomain}.${RootDomainName}"
            HostedZoneId: { Fn::ImportValue: !Ref HostedZoneIdImportName }
        - - DomainName: !Ref RootDomainName
            HostedZoneId: { Fn::ImportValue: !Ref HostedZoneIdImportName }
          - DomainName: !Sub "www.${RootDomainName}"
            HostedZoneId: { Fn::ImportValue: !Ref HostedZoneIdImportName }

  SiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac"
        Description: Access control for S3 bucket
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  SiteCDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: !If
          - HasSubdomain
          - - !Sub "${Subdomain}.${RootDomainName}"
          - - !Ref RootDomainName
            - !Sub "www.${RootDomainName}"
        Origins:
          - Id: S3Bucket
            DomainName: !GetAtt SiteS3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SiteOAC
        HttpVersion: "http2"
        ViewerCertificate:
          AcmCertificateArn: !Ref TLSCertificate
          SslSupportMethod: "sni-only"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          TargetOriginId: S3Bucket
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt ViewerRequestHandler.FunctionARN
          ResponseHeadersPolicyId: !If
            - EnableSecurityHeaders
            - !Ref ResponseHeadersPolicy
            - !Ref AWS::NoValue
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 400
            ResponseCode: 400
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 503
            ResponseCode: 503
            ResponsePagePath: /error.html

  ViewerRequestHandler:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub "${AWS::StackName}-viewer-request-handler"
      AutoPublish: true
      FunctionConfig:
        Comment: "Rewrite URIs ending with / to /index.html"
        Runtime: cloudfront-js-2.0
      FunctionCode: !Sub |
        function handler(event) {
          const request = event.request;
          if (request.uri.endsWith('/')) {
            request.uri += 'index.html';
            return request;
          }

          if (${EnableCanonicalURIs}) {
            const uri = event.request.uri;

            const NO_DOT_IN_LAST_PATH_SEGMENT = /(^(?:.+\/)*[^.]*$)/g;
            const CONSECUTIVE_SLASHES_ANYWHERE = /\/+/g;
            const TRAILING_INDEX_HTML = /\/index\.html$/;

            const canonicalizedUri = uri
              .replace(TRAILING_INDEX_HTML, "/") // Remove trailing index.html if present
              .replace(NO_DOT_IN_LAST_PATH_SEGMENT, "$1/") // Add trailing slash if it looks like a directory
              .replace(CONSECUTIVE_SLASHES_ANYWHERE, "/"); // Collapse consecutive slashes

            if (canonicalizedUri !== uri) {
              return {
                statusCode: 301,
                headers: { location: { value: canonicalizedUri } },
              };
            }
          }

          return request;
        }

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Condition: EnableSecurityHeaders
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${AWS::StackName}-security-headers"
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 31536000 # 1 year
            Override: true
            IncludeSubdomains: false
          ContentTypeOptions:
            Override: true
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin
          ContentSecurityPolicy:
            Override: true
            ContentSecurityPolicy: !Ref ContentSecurityPolicy
        CustomHeadersConfig:
          Items:
            - Header: "Cross-Origin-Opener-Policy"
              Value: "same-origin-allow-popups"
              Override: true

  SiteARecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: { Fn::ImportValue: !Ref HostedZoneIdImportName }
      Name: !If [HasSubdomain, !Sub "${Subdomain}.${RootDomainName}", !Ref RootDomainName]
      Type: A
      AliasTarget:
        DNSName: !GetAtt SiteCDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  SiteWWWRecord:
    Condition: CreateWWWRecord
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: { Fn::ImportValue: !Ref HostedZoneIdImportName }
      Name: !Sub "www.${RootDomainName}"
      Type: CNAME
      TTL: 600
      ResourceRecords:
        - !Ref RootDomainName

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !Sub
      - "https://${DomainName}/"
      - DomainName: !If [HasSubdomain, !Sub "${Subdomain}.${RootDomainName}", !Ref RootDomainName]

  CloudFrontDistributionId:
    Description: The CloudFront Distribution Id to be used for creating invalidations during deployment
    Value: !Ref SiteCDN

  BucketName:
    Description: The name of the S3 bucket hosting the site
    Value: !Ref SiteS3Bucket
