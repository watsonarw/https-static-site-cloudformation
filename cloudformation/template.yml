Parameters:
  RootDomainName:
    Type: String
    Description: The root domain name for our site, e.g. `example.com`
  BucketName:
    Type: String
    Description: The name for the S3 bucket
  HostedZoneId:
    Type: String
    Description: The ID of an existing Route53 hosted zone to use instead of creating one
    Default: ""

Conditions:
  CreateNewHostedZone: !Equals [!Ref HostedZoneId, ""]

Resources:
  SiteS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketName: !Ref BucketName

  SiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SiteS3Bucket
      PolicyDocument:
        Statement:
          - Sid: ReadAccess
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "${SiteS3Bucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${SiteCDN}"

  TLSCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref RootDomainName
      SubjectAlternativeNames:
        - !Join [".", ["www", !Ref RootDomainName]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref RootDomainName
          HostedZoneId: !If [CreateNewHostedZone, !Ref SiteHostedZone, !Ref HostedZoneId]
        - DomainName: !Join [".", ["www", !Ref RootDomainName]]
          HostedZoneId: !If [CreateNewHostedZone, !Ref SiteHostedZone, !Ref HostedZoneId]

  SiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac"
        Description: Access control for S3 bucket
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  SiteCDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref RootDomainName
          - !Join [".", ["www", !Ref RootDomainName]]
        Origins:
          - Id: S3Bucket
            DomainName: !GetAtt [SiteS3Bucket, RegionalDomainName]
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SiteOAC
        HttpVersion: "http2"
        ViewerCertificate:
          AcmCertificateArn: !Ref TLSCertificate
          SslSupportMethod: "sni-only"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          TargetOriginId: S3Bucket
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 400
            ResponseCode: 400
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /error.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 503
            ResponseCode: 503
            ResponsePagePath: /error.html

  SiteHostedZone:
    Condition: CreateNewHostedZone
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Ref RootDomainName

  SiteARecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !If [CreateNewHostedZone, !Ref SiteHostedZone, !Ref HostedZoneId]
      Name: !Ref RootDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt [SiteCDN, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2

  SiteWWWRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !If [CreateNewHostedZone, !Ref SiteHostedZone, !Ref HostedZoneId]
      Name: !Join [".", ["www", !Ref RootDomainName]]
      Type: CNAME
      TTL: 600
      ResourceRecords:
        - !Ref RootDomainName

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !Join ["", ["https://", !Ref RootDomainName]]

  NameServers:
    Condition: CreateNewHostedZone
    Description: DNS NameServers for the site
    Value: !Join [", ", !GetAtt [SiteHostedZone, NameServers]]

  CloudFrontDistributionId:
    Description: The CloudFront Distribution Id to be used for creating invalidations during deployment
    Value: !Ref SiteCDN
